{"version":3,"sources":["MyForm.tsx","Counter.tsx","ReducerSample.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MyForm","onSubmit","inputRef","useRef","useState","name","description","form","setForm","onChange","e","target","value","preventDefault","current","focus","ref","type","reducer","state","action","Error","Counter","useReducer","count","dispatch","onClick","text","color","isGood","ReducerSample","App","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oZA8CeA,MAxCf,YAA4C,IAA1BC,EAAyB,EAAzBA,SACVC,EAAWC,iBAAyB,MADD,EAGjBC,mBAAS,CAC/BC,KAAM,GACNC,YAAa,KAL0B,mBAGlCC,EAHkC,KAG5BC,EAH4B,KAQjCH,EAAsBE,EAAtBF,KAAMC,EAAgBC,EAAhBD,YAERG,EAAW,SAACC,GAA4C,IAAD,EACnCA,EAAEC,OAAlBN,EADmD,EACnDA,KAAMO,EAD6C,EAC7CA,MACdJ,E,yVAAQ,CAAD,GACFD,EADE,eAEJF,EAAOO,MAiBZ,OACE,0BAAMX,SAda,SAACS,GACpBA,EAAEG,iBACFZ,EAASM,GACTC,EAAQ,CACNH,KAAM,GACNC,YAAa,KAEVJ,EAASY,SAGdZ,EAASY,QAAQC,UAKf,2BAAOV,KAAK,OAAOO,MAAOP,EAAMI,SAAUA,EAAUO,IAAKd,IACzD,2BAAOG,KAAK,cAAcO,MAAON,EAAaG,SAAUA,IACxD,4BAAQQ,KAAK,UAAb,kBCpCN,SAASC,EAAQC,EAAeC,GAC9B,OAAQA,EAAOH,MACb,IAAK,WACH,OAAOE,EAAQ,EACjB,IAAK,WACH,OAAOA,EAAQ,EACjB,QACE,MAAM,IAAIE,MAAM,sBAIP,SAASC,IAAW,IAAD,EACNC,qBAAWL,EAAS,GADd,mBACzBM,EADyB,KAClBC,EADkB,KAIhC,OACE,6BACE,4BAAKD,GACL,6BACE,4BAAQE,QANK,kBAAMD,EAAS,CAAER,KAAM,eAMpC,MACA,4BAAQS,QANK,kBAAMD,EAAS,CAAER,KAAM,eAMpC,Q,yjBCRR,SAASC,EAAQC,EAAcC,GAC7B,OAAQA,EAAOH,MACb,IAAK,YACH,OAAO,KACFE,EADL,CAEEK,MAAOJ,EAAOI,QAElB,IAAK,WACH,OAAO,KACFL,EADL,CAEEQ,KAAMP,EAAOO,OAEjB,IAAK,YACH,OAAO,KACFR,EADL,CAEES,MAAOR,EAAOQ,QAElB,IAAK,cACH,OAAO,KACFT,EADL,CAEEU,QAASV,EAAMU,SAEnB,QACE,MAAM,IAAIR,MAAM,qBAIP,SAASS,IAAiB,IAAD,EACZP,qBAAWL,EAAS,CAC5CM,MAAO,EACPG,KAAM,QACNC,MAAO,MACPC,QAAQ,IAL4B,mBAC/BV,EAD+B,KACxBM,EADwB,KAYtC,OACE,6BACE,2BACE,yCADF,IACwBN,EAAMK,OAE9B,2BACE,wCADF,IACuBL,EAAMQ,MAE7B,2BACE,yCADF,IACwBR,EAAMS,OAE9B,2BACE,0CADF,IACyBT,EAAMU,OAAS,OAAS,SAEjD,6BACE,4BAAQH,QAnBG,kBAAMD,EAAS,CAAER,KAAM,YAAaO,MAAO,MAmBtD,aACA,4BAAQE,QAnBE,kBAAMD,EAAS,CAAER,KAAM,WAAYU,KAAM,UAmBnD,YACA,4BAAQD,QAnBG,kBAAMD,EAAS,CAAER,KAAM,YAAaW,MAAO,aAmBtD,aACA,4BAAQF,QAnBK,kBAAMD,EAAS,CAAER,KAAM,kBAmBpC,iBCtER,IAaec,EAbO,WAIpB,OACE,oCACE,kBAACT,EAAD,MACA,kBAACQ,EAAD,MACA,kBAAC,EAAD,CAAQ7B,SAPK,SAACM,GAChByB,QAAQC,IAAI1B,QCMI2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.05cb0852.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\n\ntype MyFormProps = {\n  onSubmit: (form: { name: string; description: string }) => void;\n};\n\nfunction MyForm({ onSubmit }: MyFormProps) {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [form, setForm] = useState({\n    name: \"\",\n    description: \"\"\n  });\n\n  const { name, description } = form;\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setForm({\n      ...form,\n      [name]: value\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    onSubmit(form);\n    setForm({\n      name: \"\",\n      description: \"\"\n    });\n    if (!inputRef.current) {\n      return;\n    }\n    inputRef.current.focus();\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input name=\"name\" value={name} onChange={onChange} ref={inputRef} />\n      <input name=\"description\" value={description} onChange={onChange} />\n      <button type=\"submit\">등록</button>\n    </form>\n  );\n}\n\nexport default MyForm;\n","import React, { useReducer } from \"react\";\n\ntype Action = { type: \"INCREASE\" } | { type: \"DECREASE\" };\n// 이렇게 액션을 | 으로 연달아서 쭉 나열하세요.\n\nfunction reducer(state: number, action: Action): number {\n  switch (action.type) {\n    case \"INCREASE\":\n      return state + 1;\n    case \"DECREASE\":\n      return state - 1;\n    default:\n      throw new Error(\"Unhandleed action\");\n  }\n}\n\nexport default function Counter() {\n  const [count, dispatch] = useReducer(reducer, 0);\n  const onIncrease = () => dispatch({ type: \"INCREASE\" });\n  const onDecrease = () => dispatch({ type: \"DECREASE\" });\n  return (\n    <div>\n      <h1>{count}</h1>\n      <div>\n        <button onClick={onIncrease}>+1</button>\n        <button onClick={onDecrease}>-1</button>\n      </div>\n    </div>\n  );\n}\n","import React, { useReducer } from \"react\";\n\ntype Color = \"red\" | \"orange\" | \"yellow\";\n\ntype State = {\n  count: number;\n  text: string;\n  color: Color;\n  isGood: boolean;\n};\n\ntype Action =\n  | { type: \"SET_COUNT\"; count: number }\n  | { type: \"SET_TEXT\"; text: string }\n  | { type: \"SET_COLOR\"; color: Color }\n  | { type: \"TOGGLE_GOOD\" };\n\nfunction reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case \"SET_COUNT\":\n      return {\n        ...state,\n        count: action.count // count가 자동완성되며, number 타입인걸 알 수 있습니다.\n      };\n    case \"SET_TEXT\":\n      return {\n        ...state,\n        text: action.text\n      };\n    case \"SET_COLOR\":\n      return {\n        ...state,\n        color: action.color\n      };\n    case \"TOGGLE_GOOD\":\n      return {\n        ...state,\n        isGood: !state.isGood\n      };\n    default:\n      throw new Error(\"Unhandled action\");\n  }\n}\n\nexport default function ReducerSample() {\n  const [state, dispatch] = useReducer(reducer, {\n    count: 0,\n    text: \"hello\",\n    color: \"red\",\n    isGood: true\n  });\n\n  const setCount = () => dispatch({ type: \"SET_COUNT\", count: 5 }); // count를 넣지 않으면 에러 발생\n  const setText = () => dispatch({ type: \"SET_TEXT\", text: \"bye\" }); // text를 넣지 않으면 에러 발생\n  const setColor = () => dispatch({ type: \"SET_COLOR\", color: \"orange\" }); // count를 넣지 않으면 에러 발생\n  const toggleGood = () => dispatch({ type: \"TOGGLE_GOOD\" }); // count를 넣지 않으면 에러 발생\n  return (\n    <div>\n      <p>\n        <code>count: </code> {state.count}\n      </p>\n      <p>\n        <code>text: </code> {state.text}\n      </p>\n      <p>\n        <code>color: </code> {state.color}\n      </p>\n      <p>\n        <code>isGood: </code> {state.isGood ? \"true\" : \"false\"}\n      </p>\n      <div>\n        <button onClick={setCount}>SET_COUNT</button>\n        <button onClick={setText}>SET_TEXT</button>\n        <button onClick={setColor}>SET_COLOR</button>\n        <button onClick={toggleGood}>TOGGLE_GOOD</button>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport MyForm from \"./MyForm\";\nimport Counter from \"./Counter\";\nimport ReducerSample from \"./ReducerSample\";\nconst App: React.FC = () => {\n  const onSubmit = (form: { name: string; description: string }) => {\n    console.log(form);\n  };\n  return (\n    <>\n      <Counter />\n      <ReducerSample />\n      <MyForm onSubmit={onSubmit} />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}